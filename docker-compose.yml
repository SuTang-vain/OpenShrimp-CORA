version: '3.8'

services:
  # 主应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shrimp-agent-app
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/shrimp_agent
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - shrimp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Strata MCP Server（统一工具注册与路由）
  strata:
    build:
      context: ./strata
      dockerfile: Dockerfile
    container_name: strata-mcp-server
    ports:
      - "8080:8080"
    depends_on:
      - mcp-rag
      - mcp-graph
    restart: unless-stopped
    networks:
      - shrimp-network

  # MCP 子服务：RAG
  mcp-rag:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-rag-service
    command: uvicorn backend.mcp.rag.main:app --host 0.0.0.0 --port 8001
    expose:
      - "8001"
    environment:
      - CORA_URL=http://app:8000
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - shrimp-network

  # MCP 子服务：Graph
  mcp-graph:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-graph-service
    command: uvicorn backend.mcp.graph.main:app --host 0.0.0.0 --port 8002
    expose:
      - "8002"
    environment:
      - CORA_URL=http://app:8000
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - shrimp-network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: shrimp-agent-postgres
    environment:
      - POSTGRES_DB=shrimp_agent
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - shrimp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d shrimp_agent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: shrimp-agent-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - shrimp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: shrimp-agent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - shrimp-network
    profiles:
      - production

  # 监控服务 - Prometheus（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: shrimp-agent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - shrimp-network
    profiles:
      - monitoring

  # 监控服务 - Grafana（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: shrimp-agent-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - shrimp-network
    profiles:
      - monitoring

  # 日志收集 - Elasticsearch（可选）
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: shrimp-agent-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - shrimp-network
    profiles:
      - logging

  # 日志收集 - Kibana（可选）
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: shrimp-agent-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - shrimp-network
    profiles:
      - logging

# 网络配置
networks:
  shrimp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local